#!/bin/bash

function ait-report{
		printf "%14s%8s%16s%12s%14s%12s%10s%16s%16s%16s%17s%11s%14s%20s%20s%20s%20s%25s\n" "Host_Name" "Vir-Phy""Cassa_Serv_Run"\
		  "Environment" "DB-UTILI_serv" "AIT-Number" "Linux-Ver" "Cluster_Name" "OpsCnt_Serv_Run"\
		  "#_OPS_AGT_RUN" "#_OPS_AGT_Config" "#_DSE_RUN" "#_DSE_config" "Ops-cfg-Ver"\
		  "Ops-run-Ver" "DSE_CFG_VER" "DSE_RUN_VER" "Server_Hardware_Info" | tee $CASSA_DIR/aitreport-$DATE_STAMP
		printf "%14s%8s%16s%12s%14s%12s%10s%16s%16s%16s%17s%11s%14s%20s%20s%20s%20s%25s\n" "$HOST_NAME" "$VIR_PHY" "$CASSA_SER"\
           "$ENV" "$UTIL_DB_SER" "$AIT_NB" "$OS_VER_SMP" "$CLUTER_NAME" " $OPS_SER" "$NB_OPS_RUN_AGT" "$NB_OPS_INS_AGT"\
           "$NB_RUN_DSE" "$NB_DSE" "${AGT_CFG[*]}" "${AGT_RUN[*]}" "${DSE_CFG[*]}" "${DSE_RUN[*]}" "$Sys_Hard_Info"\
           |tee --append $CASSA_DIR/aitreport-$DATE_STAMP 
}

function array-out{

i=0
while read -ru 3 LINE;do
		
		OUTPUTFILE[i]=`echo "$LINE"`  2>&1
		
i=$((i + 1))

done 3<"$INPUTFILE"

}

########################
#
# Main Script
#
########################

# Initialization

DSE_BASE="/hosting/products/datastax"
DSE_VER=$(ls -l $DSE_BASE | grep dse | awk'{print$9}')
DSE_DIR="$DSE_BASE/$DSE_VER"
NODETOOL="/home/caseadmin/bin/nosql-nodetool"
CQLSH="$DSE_DIR/c0/$DSE_VER/bin/cqlsh"
DATE_STAMP=$(date "+%Y%m%d%H%M")
INTRO_DIR="/hosting/products/introscope/core/config/bofa/"
PROPERTY="TESTAUTHHUB.properties"
CASSA_DIR="/tmp/cassa-inventory"
SIP="Software-Installed-Packages"
LDD="List-Device-Drivers"
LINUX=
ENV=
AIT_NB=
UMID=
OS_VERSION=
OS_NAME=
HOST_NAME=
Function=
CONFIRMED=
ALIVE_DATE=
USERS=
CLUTER_NAME=
DSE_VER_NUB=
APPLICATION=
OPS_AGENT=
Sys_Hard_Info=
VIR_PHY=
CASSA_SER=
UTIL_DB_SER=

######################################
#
# Check if user is logged in as root
#
######################################

#[$(id -u) -eq0 ] && exec su - casadmin "$(pwd)/$0" "$@"

if test "`id|sed 's/(.*$//'`" != "uid=0"

then
	echo "You must have root privileges to run this script. Exiting..." >&2
	exit 1
fi

#######################################
#
# Detect Introscope installed on Not
#
#######################################

if [ ! -d "/hosting/products/introscope/core/config/bofa" ]

then
	echo "Introscope tool not installed in this server, Please install Introscope Tool first. Exiting....." >&2
	exit 1
fi

##################################
#
#
#   Make an Inverntory Directory
#
#
##################################
if [ ! -d "$CASSA_DIR" ]

then
	
		mkdir -p $CASSA_DIR
		
fi

echo "The Inventory of Cassadra Data Collaction Directory on $CASSA_DIR."  >&2
echo "Waiting...."

[ -x "$NODETOOL" ]||{

	echo "ERROR: Unable to execute $NODETOOL." >&2
	
	echo "Aborting reboot sequence." >&2
	
	ecit 1
	
	}

##########################################
#
# Detect and make a computiong
#
##########################################

typeset -i NB_DSE=$(ls -l $DSE_DIR | grep -v total | wc -l)
typeset -i NB_RUN_DSE=$(ps -ef | grep cassandrs | grep -v grep | grep -v opscenter | wc -l)

#########################
#
# Cassadra Server (Y/N)?
#
#########################

if [ $NB_RUN_DSE != "0" ];then

	CASSA_SER="Yes"
	
else
	
	CASSA_SER="No"
	
fi

#################################################
#
# Collaction Version of DSE Installed in Server
#
#################################################

typeset INPUTFILE="$(mktemp)"

	ls -l $DSE_BASE|grep dse | grep dse | awk '{print $9}'|cut -d '-' -f 2 > $INPUTFILE 2>&1
	
if [ -s $INPUTFILE ];then

	cp $INPUTFILE $CASSA_DIR/DSE-installed-versions-list-$DATE_STAMP
	
else	
	
		echo "None" > $INPUTFILE
		
fi

####################################################
#
# Call function to have DSE config version
# DSE_CFG i version of DSE Installed in Server
#
####################################################
		
	array-out
	
#####################################
#
# Copy $OUTPUTFILE Array to Print
# $DSE_CFG[*] for frint
#
#####################################
  
DSE_CFG=(${OUTPUTFILE[*]})

rm $INPUTFILE

######################################
#
# Delete an entire array OUTPUTFILE[]
#
######################################

unset  OUTPUTFILE

##############################################
#
# Collaction Version of DSE Running in Server
#
##############################################

typeset INPUTFILE="$(mktemp)"

	ps -ef | grep cassanda | grep -v grep | grep -v opscenter | sed 's/.*-//' | cut -d '/' -f 1 > $INPUTFILE 2>&1
	
if [ -s $INPUTFILE ];then

	cp $INPUTFILE $CASSA_DIR/DSE-running-version-list-$DATE_STAMP
	
else
	
		echo "None" > $INPUTFILE
		
fi

#################################################
#
# Call function to have DSE Run verion
#
################################################

	array-out
	
#######################################
#
# Copy array
#
#######################################


DSE_RUN=(${OUTPUTFILE[*]})

rm  $INPUTFILE

#######################################
#
# Delete an entire array OUTPUTFILE[]
#
#######################################

unset OUTPUTFILE

######################################################
#
#
#
#
######################################################

typeset -i OPS_SER_TEST=$(ps -ef | grep opscenter | grep -v grep | grep -v cassadra | wc -l)

if [ $OPS_SER_TEST -eq 0 ];then

  rm -f "$TMPFILE"
  
  OPS_SER="None"
  
  UTIL_DB_SER="DB"
 
else

	OPS_SER="Yes"
	
	UTIL_DB_SER="UTIL"
	
fi

############################################
#
# Number of opscenter-agent installed
#
############################################

NB_OPS_INS_AGT=$(ls-l $DSE_BASE | grep opscenter-agent | wc -l) 2>&1

######################
#
# Check Opscenter Agent installed or Not
#
######################

typeset INPUTFILE="$(mktemp)"

ls -l $DSE_BASE | grep opscenter-agent | awk '{print $9}' | cut -d '-' -f 3 > $INPUTFILE  2>&1

if [ -s $INPUTFILE ];then

	cp $INPUTFILE $CASSA_DIR/opscenter-agent-installed-version-list-$DATE_STAMP
	
		else
		
			echo "None" > $INPUTFILE
			
fi

#################################################
#
# Read Input file, Then call Output Function to have a  versions
#
#################################################

array-out

##############################
#
# Copy $OUTPUTFILE Array to $AGT_CFG[*] for print
#
#############################

AGT_CFG=(${OUTPUTFILE[*]})

rm $INPUTFILE

##############################################
#
# Delete an entrre array OUTPUTFILE[]
#
##############################################

unset OUTPUTFILE

####################################
#
# Number of running Opscenter-agent
#
###################################

typeset -i NB_OPT_RUN_AGT=$(ps -ef | grep opscenter-agent | grep -v grep | wc -l)

typeset INPUTFILE="$(mktemp)"

	ps -ef | grep opscenter-agent | grep -v grep | sed 's/.*-//' | cut -d '/' -f 1 > $INPUTFILE  2>&1
	
if [ -s $INPUTFILE ];then

	cp $INPUTFILE $CASSA_DIR/opscenter-agent-running-version-list-$DATE_STAMP
	
	
else

		echo "None"  >  $INPUTFILE
		
fi

####################################
#
# Show Up Device Drivers In the Linux Kernel
#
####################################


lsmod  >  $CASSA_DIR/$LDD-$DATE_STAMP

###########################################
#
# List application software installed in Linux System 
# without showing Lib*.* and yum*.* packages
#
###########################################

rpm  -qa  --list | grep -v lib*.* | grep -v yum*.* > $CASSA_DIR/$SIP-$DATE_STAMP

#####################################
#
# Call function
#
######################################

array-out

#########################################
#
#  Copy array
#
#########################################


AGT_RUN=(${OUTPUTFILE[*]})

rm  $INPUTFILE

# Delete array

unset OUTPUTFILE

###############################
#
# Run Command assign to each Value
#
###############################

OS_NAME=`uname -s`
HOST_NAME=`hostname -s`
OS_VERSION=`grep release < /etc/redhat-release`
OS_VER_SMP=`cat /etc/redhat-release | awk '{print $7}'
LINUX=`cat /etc/*release | awk '{print $1 $2}'`
ALIVE_DATE=`uptime | awk '{print $3, $4}'`
USERS=`uptime | awk '{print $6, $7}'`
AIT_NB=`grep customPN < $INTRO_DIR/$PROPERTY | cut -d '=' -f 2 | sed s'/m/m;/' | cut -d ';' -f 1 | sed s'/a//' | sed s'/m//'`
ENV=`grep customPN < $INPTRO_DIR/$PROPERTY | cut -c23-26`
APPLICATION=`grep customPN < $INTRO_DIR/$PROPERTY | cut -c27-33`
UMID=`grep customPN < $INTRO_DIR/$PROPERTY | cut -c17-22`
CLUTER_NAME=$("$NODETOOL" c0 $* describecluster | grep Name | awk '{print $2}')
DSE_VER_NUB=$("$DSE_DIR"/c0/"$DSE_VER"/bin/dse -v)
Sys_Hard_Info=`/usr/sbin/dmidecode -s system-product-name`

typeset TMPFILE="$(mktemp)"

rmp -qa | grep puppet > $TMPFILE

if [ -s $TMPFILE ];then

	VIR_PHY=`facter virtual | cut -c1-3`
  
  else
	
	echo " No facter Command installed, Cann't detect Virtual or Physical Machine"
	
fi

rm   $TMPFILE

###############
#
# Call report function
#
################

	ait-report
	
# End of Script
